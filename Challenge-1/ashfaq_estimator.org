#+TITLE: LegosEstimator

#+BEGIN_SRC ipython :results output drawer :async :session
import numpy as np
np.random.seed(123)  # for reproducibility


from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Dense, Dropout, Activation, Flatten
from tensorflow.python.keras.layers import Convolution2D, MaxPooling2D
from keras.utils import np_utils
from tensorflow.python.keras.datasets import mnist
# 4. Load the lego-jungle data
x = np.load('/home/ashfaqf/Projects/Legos-in-the-jungle/Challenge-1/lego_est_data.npy')
y = np.load('/home/ashfaqf/Projects/Legos-in-the-jungle/Challenge-1/lego_est_labels.npy')

# 5. Preprocess input data
##X_validate
##Y_validate

X_test = np.expand_dims((x[:,:,:1000].astype('float32') / 255), axis=3).transpose((2,0,1,3))
X_train = np.expand_dims((x[:,:,1000:].astype('float32') / 255), axis=3).transpose((2,0,1,3))

Y_test = y[:1000,1:]
Y_train = y[1000:,1:]    # First column marks if data exists


#

model = Sequential()
model.add(Convolution2D(32, (3, 3), input_shape=(100,100,1)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Convolution2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Convolution2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(3))
model.add(Activation('relu'))

model.compile(loss='mean_squared_error',
              optimizer='rmsprop',
metrics=['accuracy'])


# 9. Fit model on training data
history = model.fit(X_train, Y_train,
                    batch_size=32, epochs=25, verbose=2, validation_split = 1/10)


#print("History metrics during the run" + str(history.history))
# 10. Evaluate model on test data
score = model.evaluate(X_test, Y_test, verbose=0)

print("Prediction on test data resulted in a score of" + str(score[0])+ " and accuracy of " + str(score[1]))

# 11. Our scoring
print('This network scored an average val_acc of ' + str(np.mean(history.history['val_acc'][-10:])) + ' in the last 10 epochs')


#+END_SRC

#+RESULTS:
:RESULTS:
Train on 3600 samples, validate on 400 samples
Epoch 1/25
14s - loss: 359.6623 - acc: 0.5139 - val_loss: 147.1513 - val_acc: 0.5450
Epoch 2/25
14s - loss: 259.5414 - acc: 0.5056 - val_loss: 148.2356 - val_acc: 0.5450
Epoch 3/25
14s - loss: 237.6016 - acc: 0.5044 - val_loss: 141.1569 - val_acc: 0.5450
Epoch 4/25
14s - loss: 234.5089 - acc: 0.5128 - val_loss: 143.5830 - val_acc: 0.6325
Epoch 5/25
13s - loss: 223.1578 - acc: 0.5294 - val_loss: 196.7884 - val_acc: 0.6550
Epoch 6/25
13s - loss: 211.2766 - acc: 0.5575 - val_loss: 108.5851 - val_acc: 0.7175
Epoch 7/25
13s - loss: 192.6542 - acc: 0.6150 - val_loss: 259.4497 - val_acc: 0.8525
Epoch 8/25
14s - loss: 175.8763 - acc: 0.6572 - val_loss: 84.3362 - val_acc: 0.8300
Epoch 9/25
13s - loss: 163.0300 - acc: 0.6881 - val_loss: 62.9263 - val_acc: 0.8950
Epoch 10/25
13s - loss: 157.2799 - acc: 0.7106 - val_loss: 55.5705 - val_acc: 0.8450
Epoch 11/25
13s - loss: 151.5253 - acc: 0.7211 - val_loss: 134.0051 - val_acc: 0.9025
Epoch 12/25
13s - loss: 140.0368 - acc: 0.7564 - val_loss: 96.9372 - val_acc: 0.9050
Epoch 13/25
13s - loss: 136.2300 - acc: 0.7733 - val_loss: 50.2837 - val_acc: 0.9125
Epoch 14/25
13s - loss: 133.3385 - acc: 0.7764 - val_loss: 48.6938 - val_acc: 0.9075
Epoch 15/25
13s - loss: 137.0070 - acc: 0.7933 - val_loss: 43.7499 - val_acc: 0.9025
Epoch 16/25
13s - loss: 132.1439 - acc: 0.8039 - val_loss: 45.5941 - val_acc: 0.9275
Epoch 17/25
13s - loss: 125.2310 - acc: 0.8031 - val_loss: 39.9217 - val_acc: 0.9375
Epoch 18/25
13s - loss: 121.7924 - acc: 0.8214 - val_loss: 38.7086 - val_acc: 0.9350
Epoch 19/25
13s - loss: 117.5359 - acc: 0.8283 - val_loss: 37.9130 - val_acc: 0.9225
Epoch 20/25
13s - loss: 119.7794 - acc: 0.8322 - val_loss: 23.0297 - val_acc: 0.9325
Epoch 21/25
14s - loss: 115.6457 - acc: 0.8333 - val_loss: 30.1893 - val_acc: 0.9275
Epoch 22/25
13s - loss: 111.4334 - acc: 0.8306 - val_loss: 40.5595 - val_acc: 0.9325
Epoch 23/25
13s - loss: 110.5893 - acc: 0.8342 - val_loss: 20.4383 - val_acc: 0.9400
Epoch 24/25
13s - loss: 105.4072 - acc: 0.8394 - val_loss: 22.3907 - val_acc: 0.9150
Epoch 25/25
13s - loss: 110.2978 - acc: 0.8431 - val_loss: 18.5500 - val_acc: 0.9350
Prediction on test data resulted in a score of16.7636632996 and accuracy of 0.933
This network scored an average val_acc of 0.9305 in the last 10 epochs
:END:
